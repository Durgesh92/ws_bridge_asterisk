/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var src_riva_proto_riva_nlp_core_pb = require('../../src/riva_proto/riva_nlp_core_pb.js');
goog.object.extend(proto, src_riva_proto_riva_nlp_core_pb);
goog.exportSymbol('proto.nvidia.riva.nlp.AnalyzeEntitiesOptions', null, global);
goog.exportSymbol('proto.nvidia.riva.nlp.AnalyzeEntitiesRequest', null, global);
goog.exportSymbol('proto.nvidia.riva.nlp.AnalyzeIntentContext', null, global);
goog.exportSymbol('proto.nvidia.riva.nlp.AnalyzeIntentOptions', null, global);
goog.exportSymbol('proto.nvidia.riva.nlp.AnalyzeIntentRequest', null, global);
goog.exportSymbol('proto.nvidia.riva.nlp.AnalyzeIntentResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nvidia.riva.nlp.AnalyzeIntentContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nvidia.riva.nlp.AnalyzeIntentContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nvidia.riva.nlp.AnalyzeIntentContext.displayName = 'proto.nvidia.riva.nlp.AnalyzeIntentContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.nvidia.riva.nlp.AnalyzeIntentOptions.oneofGroups_);
};
goog.inherits(proto.nvidia.riva.nlp.AnalyzeIntentOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nvidia.riva.nlp.AnalyzeIntentOptions.displayName = 'proto.nvidia.riva.nlp.AnalyzeIntentOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nvidia.riva.nlp.AnalyzeIntentRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nvidia.riva.nlp.AnalyzeIntentRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nvidia.riva.nlp.AnalyzeIntentRequest.displayName = 'proto.nvidia.riva.nlp.AnalyzeIntentRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nvidia.riva.nlp.AnalyzeIntentResponse.repeatedFields_, null);
};
goog.inherits(proto.nvidia.riva.nlp.AnalyzeIntentResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nvidia.riva.nlp.AnalyzeIntentResponse.displayName = 'proto.nvidia.riva.nlp.AnalyzeIntentResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nvidia.riva.nlp.AnalyzeEntitiesOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.displayName = 'proto.nvidia.riva.nlp.AnalyzeEntitiesOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nvidia.riva.nlp.AnalyzeEntitiesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.displayName = 'proto.nvidia.riva.nlp.AnalyzeEntitiesRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nvidia.riva.nlp.AnalyzeIntentContext.prototype.toObject = function(opt_includeInstance) {
  return proto.nvidia.riva.nlp.AnalyzeIntentContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeIntentContext.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nvidia.riva.nlp.AnalyzeIntentContext}
 */
proto.nvidia.riva.nlp.AnalyzeIntentContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nvidia.riva.nlp.AnalyzeIntentContext;
  return proto.nvidia.riva.nlp.AnalyzeIntentContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nvidia.riva.nlp.AnalyzeIntentContext}
 */
proto.nvidia.riva.nlp.AnalyzeIntentContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nvidia.riva.nlp.AnalyzeIntentContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nvidia.riva.nlp.AnalyzeIntentContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeIntentContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.ContextCase = {
  CONTEXT_NOT_SET: 0,
  PREVIOUS_INTENT: 1,
  VECTORS: 2
};

/**
 * @return {proto.nvidia.riva.nlp.AnalyzeIntentOptions.ContextCase}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.getContextCase = function() {
  return /** @type {proto.nvidia.riva.nlp.AnalyzeIntentOptions.ContextCase} */(jspb.Message.computeOneofCase(this, proto.nvidia.riva.nlp.AnalyzeIntentOptions.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.nvidia.riva.nlp.AnalyzeIntentOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    previousIntent: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vectors: (f = msg.getVectors()) && proto.nvidia.riva.nlp.AnalyzeIntentContext.toObject(includeInstance, f),
    domain: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lang: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nvidia.riva.nlp.AnalyzeIntentOptions}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nvidia.riva.nlp.AnalyzeIntentOptions;
  return proto.nvidia.riva.nlp.AnalyzeIntentOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nvidia.riva.nlp.AnalyzeIntentOptions}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreviousIntent(value);
      break;
    case 2:
      var value = new proto.nvidia.riva.nlp.AnalyzeIntentContext;
      reader.readMessage(value,proto.nvidia.riva.nlp.AnalyzeIntentContext.deserializeBinaryFromReader);
      msg.setVectors(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLang(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nvidia.riva.nlp.AnalyzeIntentOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVectors();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nvidia.riva.nlp.AnalyzeIntentContext.serializeBinaryToWriter
    );
  }
  f = message.getDomain();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLang();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string previous_intent = 1;
 * @return {string}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.getPreviousIntent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.setPreviousIntent = function(value) {
  jspb.Message.setOneofField(this, 1, proto.nvidia.riva.nlp.AnalyzeIntentOptions.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.clearPreviousIntent = function() {
  jspb.Message.setOneofField(this, 1, proto.nvidia.riva.nlp.AnalyzeIntentOptions.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.hasPreviousIntent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AnalyzeIntentContext vectors = 2;
 * @return {?proto.nvidia.riva.nlp.AnalyzeIntentContext}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.getVectors = function() {
  return /** @type{?proto.nvidia.riva.nlp.AnalyzeIntentContext} */ (
    jspb.Message.getWrapperField(this, proto.nvidia.riva.nlp.AnalyzeIntentContext, 2));
};


/** @param {?proto.nvidia.riva.nlp.AnalyzeIntentContext|undefined} value */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.setVectors = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.nvidia.riva.nlp.AnalyzeIntentOptions.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.clearVectors = function() {
  this.setVectors(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.hasVectors = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string domain = 3;
 * @return {string}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.setDomain = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string lang = 4;
 * @return {string}
 */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.getLang = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.nvidia.riva.nlp.AnalyzeIntentOptions.prototype.setLang = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nvidia.riva.nlp.AnalyzeIntentRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    options: (f = msg.getOptions()) && proto.nvidia.riva.nlp.AnalyzeIntentOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nvidia.riva.nlp.AnalyzeIntentRequest}
 */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nvidia.riva.nlp.AnalyzeIntentRequest;
  return proto.nvidia.riva.nlp.AnalyzeIntentRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nvidia.riva.nlp.AnalyzeIntentRequest}
 */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = new proto.nvidia.riva.nlp.AnalyzeIntentOptions;
      reader.readMessage(value,proto.nvidia.riva.nlp.AnalyzeIntentOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nvidia.riva.nlp.AnalyzeIntentRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nvidia.riva.nlp.AnalyzeIntentOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AnalyzeIntentOptions options = 2;
 * @return {?proto.nvidia.riva.nlp.AnalyzeIntentOptions}
 */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.prototype.getOptions = function() {
  return /** @type{?proto.nvidia.riva.nlp.AnalyzeIntentOptions} */ (
    jspb.Message.getWrapperField(this, proto.nvidia.riva.nlp.AnalyzeIntentOptions, 2));
};


/** @param {?proto.nvidia.riva.nlp.AnalyzeIntentOptions|undefined} value */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.prototype.setOptions = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.prototype.clearOptions = function() {
  this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nvidia.riva.nlp.AnalyzeIntentRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nvidia.riva.nlp.AnalyzeIntentResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    intent: (f = msg.getIntent()) && src_riva_proto_riva_nlp_core_pb.Classification.toObject(includeInstance, f),
    slotsList: jspb.Message.toObjectList(msg.getSlotsList(),
    src_riva_proto_riva_nlp_core_pb.TokenClassValue.toObject, includeInstance),
    domainStr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    domain: (f = msg.getDomain()) && src_riva_proto_riva_nlp_core_pb.Classification.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nvidia.riva.nlp.AnalyzeIntentResponse}
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nvidia.riva.nlp.AnalyzeIntentResponse;
  return proto.nvidia.riva.nlp.AnalyzeIntentResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nvidia.riva.nlp.AnalyzeIntentResponse}
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_riva_proto_riva_nlp_core_pb.Classification;
      reader.readMessage(value,src_riva_proto_riva_nlp_core_pb.Classification.deserializeBinaryFromReader);
      msg.setIntent(value);
      break;
    case 2:
      var value = new src_riva_proto_riva_nlp_core_pb.TokenClassValue;
      reader.readMessage(value,src_riva_proto_riva_nlp_core_pb.TokenClassValue.deserializeBinaryFromReader);
      msg.addSlots(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomainStr(value);
      break;
    case 4:
      var value = new src_riva_proto_riva_nlp_core_pb.Classification;
      reader.readMessage(value,src_riva_proto_riva_nlp_core_pb.Classification.deserializeBinaryFromReader);
      msg.setDomain(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nvidia.riva.nlp.AnalyzeIntentResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nvidia.riva.nlp.AnalyzeIntentResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_riva_proto_riva_nlp_core_pb.Classification.serializeBinaryToWriter
    );
  }
  f = message.getSlotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      src_riva_proto_riva_nlp_core_pb.TokenClassValue.serializeBinaryToWriter
    );
  }
  f = message.getDomainStr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDomain();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      src_riva_proto_riva_nlp_core_pb.Classification.serializeBinaryToWriter
    );
  }
};


/**
 * optional Classification intent = 1;
 * @return {?proto.nvidia.riva.nlp.Classification}
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.getIntent = function() {
  return /** @type{?proto.nvidia.riva.nlp.Classification} */ (
    jspb.Message.getWrapperField(this, src_riva_proto_riva_nlp_core_pb.Classification, 1));
};


/** @param {?proto.nvidia.riva.nlp.Classification|undefined} value */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.setIntent = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.clearIntent = function() {
  this.setIntent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.hasIntent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TokenClassValue slots = 2;
 * @return {!Array<!proto.nvidia.riva.nlp.TokenClassValue>}
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.getSlotsList = function() {
  return /** @type{!Array<!proto.nvidia.riva.nlp.TokenClassValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, src_riva_proto_riva_nlp_core_pb.TokenClassValue, 2));
};


/** @param {!Array<!proto.nvidia.riva.nlp.TokenClassValue>} value */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.setSlotsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.nvidia.riva.nlp.TokenClassValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nvidia.riva.nlp.TokenClassValue}
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.addSlots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.nvidia.riva.nlp.TokenClassValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.clearSlotsList = function() {
  this.setSlotsList([]);
};


/**
 * optional string domain_str = 3;
 * @return {string}
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.getDomainStr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.setDomainStr = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Classification domain = 4;
 * @return {?proto.nvidia.riva.nlp.Classification}
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.getDomain = function() {
  return /** @type{?proto.nvidia.riva.nlp.Classification} */ (
    jspb.Message.getWrapperField(this, src_riva_proto_riva_nlp_core_pb.Classification, 4));
};


/** @param {?proto.nvidia.riva.nlp.Classification|undefined} value */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.setDomain = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.clearDomain = function() {
  this.setDomain(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nvidia.riva.nlp.AnalyzeIntentResponse.prototype.hasDomain = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nvidia.riva.nlp.AnalyzeEntitiesOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
    lang: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nvidia.riva.nlp.AnalyzeEntitiesOptions}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nvidia.riva.nlp.AnalyzeEntitiesOptions;
  return proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nvidia.riva.nlp.AnalyzeEntitiesOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nvidia.riva.nlp.AnalyzeEntitiesOptions}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLang(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nvidia.riva.nlp.AnalyzeEntitiesOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLang();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string lang = 4;
 * @return {string}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.prototype.getLang = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.prototype.setLang = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nvidia.riva.nlp.AnalyzeEntitiesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    options: (f = msg.getOptions()) && proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nvidia.riva.nlp.AnalyzeEntitiesRequest}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nvidia.riva.nlp.AnalyzeEntitiesRequest;
  return proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nvidia.riva.nlp.AnalyzeEntitiesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nvidia.riva.nlp.AnalyzeEntitiesRequest}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = new proto.nvidia.riva.nlp.AnalyzeEntitiesOptions;
      reader.readMessage(value,proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.deserializeBinaryFromReader);
      msg.setOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nvidia.riva.nlp.AnalyzeEntitiesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOptions();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nvidia.riva.nlp.AnalyzeEntitiesOptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional AnalyzeEntitiesOptions options = 2;
 * @return {?proto.nvidia.riva.nlp.AnalyzeEntitiesOptions}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.prototype.getOptions = function() {
  return /** @type{?proto.nvidia.riva.nlp.AnalyzeEntitiesOptions} */ (
    jspb.Message.getWrapperField(this, proto.nvidia.riva.nlp.AnalyzeEntitiesOptions, 2));
};


/** @param {?proto.nvidia.riva.nlp.AnalyzeEntitiesOptions|undefined} value */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.prototype.setOptions = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.prototype.clearOptions = function() {
  this.setOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nvidia.riva.nlp.AnalyzeEntitiesRequest.prototype.hasOptions = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.nvidia.riva.nlp);
